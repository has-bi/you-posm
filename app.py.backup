import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from google.cloud import storage
from PIL import Image
import io
from datetime import datetime, date
import os
import json
import uuid
from typing import Optional
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Page configuration
st.set_page_config(
    page_title="You-POSM",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Mobile-first, clean styling
st.markdown("""
<style>
    /* Hide Streamlit elements for cleaner mobile UI */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display: none;}
    
    /* Mobile-optimized container */
    .main .block-container {
        padding-top: 1rem;
        padding-left: 1rem;
        padding-right: 1rem;
        max-width: 100%;
    }
    
    /* Clean header */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .main-header h1 {
        color: white;
        margin: 0;
        font-size: 1.8rem;
        font-weight: 700;
        letter-spacing: 0.5px;
    }
    .main-header p {
        color: rgba(255,255,255,0.9);
        margin: 0.3rem 0 0 0;
        font-size: 0.9rem;
    }
    
    /* Status indicator */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        margin: 0.5rem 0;
    }
    .status-connected {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    .status-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    /* Remove metrics styling - no longer needed */
    
    /* Form styling */
    .form-section {
        background: white;
        padding: 1.2rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border: 1px solid #f0f0f0;
    }
    
    .form-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #ffff;
        margin: 0 0 1rem 0;
        text-align: center;
    }
    
    /* Image upload areas */
    .upload-area {
        border: 2px dashed #ddd;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        margin: 0.5rem 0;
        background: #fafafa;
    }
    
    /* Success/Error messages */
    .message-box {
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        font-weight: 500;
    }
    .success-box {
        background: #d4edda;
        color: #155724;
        border-left: 4px solid #28a745;
    }
    .error-box {
        background: #f8d7da;
        color: #721c24;
        border-left: 4px solid #dc3545;
    }
    
    /* Mobile button styling */
    .stButton > button {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        margin: 0.5rem 0;
    }
    
    /* Hide Streamlit file uploader label */
    .uploadedFile {
        display: none;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 1.5rem;
        }
        .form-section {
            padding: 1rem;
        }
    }
    
    @media (max-width: 480px) {
        .main .block-container {
            padding-left: 0.5rem;
            padding-right: 0.5rem;
        }
        .form-section {
            padding: 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

class YouPosmHandler:
    """You-POSM handler with hidden spreadsheet backend"""
    
    def __init__(self):
        self.gc = None
        self.storage_client = None
        self.bucket = None
        self.worksheet = None
        self.connection_status = {"sheets": False, "storage": False}
        self._setup_connections()
    
    def _setup_connections(self):
        """Setup Google Cloud connections using environment variables"""
        try:
            # Get credentials from environment variables
            google_creds_json = os.getenv("GOOGLE_CREDENTIALS")
            bucket_name = os.getenv("GCS_BUCKET_NAME")
            spreadsheet_id = os.getenv("SPREADSHEET_ID")
            
            if not google_creds_json:
                st.error("‚ùå GOOGLE_CREDENTIALS environment variable not set")
                return False
                
            if not bucket_name:
                st.error("‚ùå GCS_BUCKET_NAME environment variable not set")
                return False
                
            if not spreadsheet_id:
                st.error("‚ùå SPREADSHEET_ID environment variable not set")
                return False
            
            # Parse Google credentials JSON
            try:
                creds_dict = json.loads(google_creds_json)
            except json.JSONDecodeError as e:
                st.error(f"‚ùå Invalid GOOGLE_CREDENTIALS JSON: {str(e)}")
                return False
            
            # Setup Google Sheets
            sheets_creds = Credentials.from_service_account_info(
                creds_dict, 
                scopes=["https://www.googleapis.com/auth/spreadsheets", 
                       "https://www.googleapis.com/auth/drive"]
            )
            self.gc = gspread.authorize(sheets_creds)
            
            # Connect to the backend spreadsheet
            try:
                spreadsheet = self.gc.open_by_key(spreadsheet_id)
                self.worksheet = spreadsheet.sheet1
                self.connection_status["sheets"] = True
            except Exception as e:
                st.error(f"‚ùå Cannot connect to spreadsheet: {str(e)}")
                self.connection_status["sheets"] = False
            
            # Setup Google Cloud Storage
            storage_creds = Credentials.from_service_account_info(
                creds_dict, 
                scopes=["https://www.googleapis.com/auth/cloud-platform"]
            )
            self.storage_client = storage.Client(credentials=storage_creds)
            
            try:
                self.bucket = self.storage_client.bucket(bucket_name)
                # Test bucket access
                self.bucket.exists()
                self.connection_status["storage"] = True
            except Exception as e:
                st.error(f"‚ùå Cannot connect to storage bucket: {str(e)}")
                self.connection_status["storage"] = False
                
        except Exception as e:
            st.error(f"‚ùå Setup error: {str(e)}")
            return False
    
    def get_existing_data(self):
        """Get existing data from spreadsheet for dropdowns"""
        try:
            if not self.worksheet:
                return [], []
            
            # Get all records
            records = self.worksheet.get_all_records()
            if not records:
                return [], []
            
            df = pd.DataFrame(records)
            
            # Extract unique stores and employees
            stores = []
            employees = []
            
            if 'Store_Name' in df.columns:
                stores = sorted(df['Store_Name'].dropna().unique().tolist())
            
            if 'Employee_Name' in df.columns:
                employees = sorted(df['Employee_Name'].dropna().unique().tolist())
            
            return stores, employees
            
        except Exception as e:
            st.error(f"‚ùå Error loading existing data: {str(e)}")
            return [], []
    
    def upload_image(self, image: Image.Image, store: str, employee: str, img_type: str) -> Optional[str]:
        """Upload image to GCS with organized structure"""
        try:
            if not self.bucket:
                return None
            
            # Clean names for folder structure
            clean_store = "".join(c for c in store if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')
            clean_employee = "".join(c for c in employee if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')
            
            # Generate path: you-posm/{store}/{employee}/{date}/{type}/{timestamp_uuid}.png
            date_str = datetime.now().strftime("%Y-%m-%d")
            timestamp = datetime.now().strftime("%H%M%S")
            unique_id = str(uuid.uuid4())[:8]
            
            path = f"you-posm/{clean_store}/{clean_employee}/{date_str}/{img_type}/{timestamp}_{unique_id}.png"
            
            # Optimize image
            if image.width > 1920:
                ratio = 1920 / image.width
                new_height = int(image.height * ratio)
                image = image.resize((1920, new_height), Image.Resampling.LANCZOS)
            
            # Upload to GCS
            img_bytes = io.BytesIO()
            image.save(img_bytes, format='PNG', optimize=True)
            img_bytes.seek(0)
            
            blob = self.bucket.blob(path)
            blob.upload_from_file(img_bytes, content_type='image/png')
            blob.make_public()
            
            return blob.public_url
            
        except Exception as e:
            st.error(f"‚ùå Image upload failed: {str(e)}")
            return None
    
    def save_data(self, data: dict) -> bool:
        """Save data to backend spreadsheet"""
        try:
            if not self.worksheet:
                st.error("‚ùå Spreadsheet not connected")
                return False
            
            # Prepare row data matching spreadsheet structure
            row_data = [
                data['store_name'],           # Store_Name
                data['employee_name'],        # Employee_Name  
                data['date'],                 # Date
                data['before_image_url'],     # Before_Image_URL
                data['after_image_url'],      # After_Image_URL
                data['timestamp'],            # Timestamp
                data.get('notes', ''),        # Notes (optional)
                'Active'                      # Status
            ]
            
            self.worksheet.append_row(row_data)
            return True
            
        except Exception as e:
            st.error(f"‚ùå Data save failed: {str(e)}")
            return False

def main():
    # Clean header
    st.markdown("""
    <div class="main-header">
        <h1>üìä You-POSM</h1>
        <p>Store Data Collection</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize handler
    if 'handler' not in st.session_state:
        st.session_state.handler = YouPosmHandler()
    
    # Connection status (compact)
    if st.session_state.handler.connection_status["sheets"] and st.session_state.handler.connection_status["storage"]:
        st.markdown('<div class="status-badge status-connected">‚úÖ System Ready</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="status-badge status-error">‚ùå Connection Error</div>', unsafe_allow_html=True)
    
    # Check if properly configured
    if not (st.session_state.handler.connection_status["sheets"] and st.session_state.handler.connection_status["storage"]):
        st.error("""
        ‚ùå **Configuration Required**
        
        Please ensure your `.env` file contains:
        - `GOOGLE_CREDENTIALS` (service account JSON as string)
        - `GCS_BUCKET_NAME` (storage bucket name)
        - `SPREADSHEET_ID` (backend spreadsheet ID)
        """)
        st.stop()
    
    # Get data for dropdowns
    stores, employees = st.session_state.handler.get_existing_data()
    
    # Main data collection form
    st.markdown('<div class="form-title">‚ûï Add New Entry</div>', unsafe_allow_html=True)
    
    with st.form("data_form", clear_on_submit=True):
        # Store and Employee in single row for mobile
        col1, col2 = st.columns(2)
        
        with col1:
            # Store selection
            store_options = ["Select Store..."] + stores + ["+ New Store"]
            store_selection = st.selectbox("üè™", store_options, label_visibility="collapsed")
            
            store_name = ""
            if store_selection == "+ New Store":
                store_name = st.text_input("", placeholder="Enter store name", key="new_store")
            elif store_selection and store_selection != "Select Store...":
                store_name = store_selection
        
        with col2:
            # Employee selection
            employee_options = ["Select Person..."] + employees + ["+ New Person"]
            employee_selection = st.selectbox("üë§", employee_options, label_visibility="collapsed")
            
            employee_name = ""
            if employee_selection == "+ New Person":
                employee_name = st.text_input("", placeholder="Enter person name", key="new_employee")
            elif employee_selection and employee_selection != "Select Person...":
                employee_name = employee_selection
        
        # Date (compact)
        entry_date = st.date_input("üìÖ Date", value=date.today(), label_visibility="collapsed")
        
        
        # Image uploads (mobile-optimized)
        st.markdown("**üì∏ Upload Images**")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Before**")
            before_image = st.file_uploader(
                "before", 
                type=['png', 'jpg', 'jpeg'],
                label_visibility="collapsed"
            )
            if before_image:
                st.image(before_image, use_column_width=True)
        
        with col2:
            st.markdown("**After**")
            after_image = st.file_uploader(
                "after", 
                type=['png', 'jpg', 'jpeg'],
                label_visibility="collapsed"
            )
            if after_image:
                st.image(after_image, use_column_width=True)
        
        # Submit button (full width)
        submitted = st.form_submit_button("üíæ Submit Entry", type="primary")
        
        if submitted:
            # Validation
            errors = []
            if not store_name:
                errors.append("Store name required")
            if not employee_name:
                errors.append("Person name required")
            if not before_image:
                errors.append("Before image required")
            if not after_image:
                errors.append("After image required")
            
            if errors:
                st.markdown(f"""
                <div class="message-box error-box">
                    <strong>‚ùå Please complete:</strong><br>
                    ‚Ä¢ {('<br>‚Ä¢ ').join(errors)}
                </div>
                """, unsafe_allow_html=True)
            else:
                # Process submission
                with st.spinner("üì§ Uploading..."):
                    before_img = Image.open(before_image)
                    after_img = Image.open(after_image)
                    
                    before_url = st.session_state.handler.upload_image(before_img, store_name, employee_name, "before")
                    after_url = st.session_state.handler.upload_image(after_img, store_name, employee_name, "after")
                    
                    if before_url and after_url:
                        # Prepare data for backend spreadsheet
                        data = {
                            'store_name': store_name,
                            'employee_name': employee_name,
                            'date': entry_date.strftime("%Y-%m-%d"),
                            'before_image_url': before_url,
                            'after_image_url': after_url,
                            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            'notes': notes
                        }
                        
                        if st.session_state.handler.save_data(data):
                            st.markdown("""
                            <div class="message-box success-box">
                                <strong>‚úÖ Success!</strong><br>
                                Data uploaded successfully.
                            </div>
                            """, unsafe_allow_html=True)
                            st.balloons()
                            
                            # Show uploaded images (mobile optimized)
                            st.markdown("**üì∑ Uploaded Images:**")
                            col1, col2 = st.columns(2)
                            with col1:
                                st.image(before_url, caption="Before", use_column_width=True)
                            with col2:
                                st.image(after_url, caption="After", use_column_width=True)
                                
                            # Force refresh
                            st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()